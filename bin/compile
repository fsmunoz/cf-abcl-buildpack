#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>
BUILD_DIR=$1
CACHE_DIR=$2
ABCL_DIR="$BUILD_DIR/.abcl"

echo "------> Creating .abcl dir"
mkdir $ABCL_DIR

# From https://github.com/trautonen/heroku-buildpack-oracle-java
maven_version() {
  base=$1
  echo $(${base}mvn --version 2>&1 | head -n 1 | cut -d ' ' -f 3)
}

install_maven() {
    cache_dir=$1
  maven_url=${2:-"http://www.eu.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz"}
  maven_ver=${3:-"3.3.9"}

  if [ ! -d "${cache_dir}" ]; then error "Invalid cache directory to store Maven."; fi

  if [ ! -f "${cache_dir}/.maven/bin/mvn" ] || [ "${maven_ver}" != "$(maven_version ${cache_dir}/.maven/bin/)" ]; then
    echo -n " (downloading...)"
    rm -rf "${cache_dir}/.maven" && mkdir -p "${cache_dir}/.maven"
    curl -s -j -k -L "${maven_url}" | tar xz -C "${cache_dir}/.maven" --strip-components=1
  fi
  
  if [ ! -f "${cache_dir}/.maven/bin/mvn" ]; then
    error "Unable to retrieve Maven."
  fi
  
  export MAVEN_OPTS=${MAVEN_OPTS:-"-Xmx384m -Xss128m"}
  export M2_HOME="${cache_dir}/.maven"
  export M2="${M2_HOME}/bin"
  export PATH="${M2}:${PATH}"
}


echo "=== Starting compile, build: $BUILD_DIR ; cache: $CACHE_DIR"

# Load common JVM functionality from https://github.com/heroku/heroku-buildpack-jvm-common
JVM_COMMON_BUILDPACK=https://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz
curl --silent --location $JVM_COMMON_BUILDPACK | tar -x bin/java -zO > /tmp/jvm-common
source /tmp/jvm-common

# Set JDK version to 1.7
JAVA_VERSION=1.7

if [ -z "$JAVA_VERSION" ]; then # could be set using user_env_compile
    if [ -f "${BUILD_DIR}/system.properties" ]; then
        JAVA_VERSION=$(get_app_system_value ${BUILD_DIR}/system.properties "java.runtime.version")
    else
        JAVA_VERSION=$DEFAULT_JDK_VERSION
    fi
fi

# Install JDK
if [ "$(is_supported_java_version ${JAVA_VERSION})" = "true" ]; then
    echo -n "-----> Installing OpenJDK ${JAVA_VERSION}..."
    install_java ${BUILD_DIR} ${JAVA_VERSION}
    jdk_overlay ${BUILD_DIR}
    echo "done"
else
    echo " !     Unsupported Java version: $JAVA_VERSION"
    exit 1
fi

# Make sure new JDK is visible
echo "--->Setting JAVA"
export JAVA_HOME="$BUILD_DIR/.jdk"
ls $JAVA_HOME
export PATH="$JAVA_HOME/bin:$PATH"



ABCL_JAR_URL="https://common-lisp.net/project/armedbear/releases/current/abcl.jar"
ABCL_JAR_PATH="$CACHE_DIR/abcl.jar"
ABCL_CONTRIB_JAR_URL="https://common-lisp.net/project/armedbear/releases/current/abcl-contrib.jar"
ABCL_CONTRIB_JAR_PATH="$CACHE_DIR/abcl-contrib.jar"

if [ ! -r "$ABCL_JAR_PATH" ]; then
    echo "-----> Downloading ABCL"
    echo "       Downloading abcl.jar"
    mkdir -p $(dirname $ABCL_JAR_PATH)
    curl --silent --show-error --max-time 120 -L -o $ABCL_JAR_PATH $ABCL_JAR_URL
    echo "       Downloading abcl-contrib.jar"
    curl --silent --show-error --max-time 120 -L -o $ABCL_CONTRIB_JAR_PATH $ABCL_CONTRIB_JAR_URL
else
    echo "-----> Using cached ABCL jars"
fi
echo "------> Copying ABCL jars to build directory..."
cp $ABCL_JAR_PATH $ABCL_DIR
cp $ABCL_CONTRIB_JAR_PATH $ABCL_DIR

ABCL_JAR_PATH="$ABCL_DIR/abcl.jar"
ABCL_CONTRIB_JAR_PATH="$ABCL_DIR/abcl-contrib.jar"
cp
echo "-----> Installing maven"
install_maven $CACHE_DIR
cp -r $CACHE_DIR/.maven $BUILD_DIR

### Quicklisp
QUICKLISP_URL="https://beta.quicklisp.org/quicklisp.lisp"
QUICKLISP_PATH="$BUILD_DIR/quicklisp.lisp"
echo "-----> Downloading Quicklisp"
curl --silent --show-error --max-time 120 -L -o $QUICKLISP_PATH  $QUICKLISP_URL


echo "-----> Getting system from ASDF: $SYSTEM"
SYSTEM=$(awk '/asdf:defsystem/ {gsub("#:","");print $2}' $BUILD_DIR/*.asd 2>/dev/null)

echo "----> DIR CONTENTS"
ls -larth $BUILD_DIR

echo "-----> Building init script"
INIT="./.init.lisp"
USER_INIT="./cf-setup.lisp"

cat > $INIT <<EOF
(load "$BUILD_DIR/quicklisp.lisp")
(quicklisp-quickstart:install)
(require :abcl-contrib)
(push "$BUILD_DIR/" asdf:*central-registry*)
(ql:quickload "abcl-bluemix")
(quit)
EOF

echo "init script is:"
cat $INIT


#JAVA=$(which java)
#ABCL="$JAVA -server -Xrs -cp $ABCL_JAR_PATH:$ABCL_CONTRIB_JAR_PATH org.armedbear.lisp.Main"

# echo "------> Configuring ASDF"
# ASDF_CONFIG_PATH="$BUILD_DIR/.config/common-lisp/source-registry.conf.d/build.conf"
# mkdir -p $(dirname $ASDF_CONFIG_PATH)
# cat > ASDF_CONFIG_PATH <<EOF
# (:directory "$BUILD_DIR")
# EOF

cat $ASDF_CONFIG_PATH

echo "-----> Creating executable"
ABCL_BIN="$ABCL_DIR/abcl"
JAVA="./.jdk/bin/java"
JVM_OPTS="-server -Xrs"
ABCL="java $JVM_OPTS -cp $ABCL_JAR_PATH:$ABCL_CONTRIB_JAR_PATH org.armedbear.lisp.Main"

cat > $ABCL_BIN <<EOF
#!/bin/sh
export PATH=\$PATH:$M2
echo "ABCL script, running with \$@ args and $PATH"
exec $ABCL "\$@"
EOF

echo "-----> Script is:"
cat $ABCL_BIN

chmod a+x $ABCL_BIN

sh -x $ABCL_BIN --load $INIT
echo "----> Rerun...."

INIT2=$BUILD_DIR/.init2.lisp

cat > $INIT2 <<EOF
(load "./quicklisp/setup.lisp")
(require :abcl-contrib)
(push "./" asdf:*central-registry*)
(load "$USER_INIT")
EOF
cat $INIT2

## Prepare for post-stage environment

#export JAVA_HOME="./.jdk"
#export JAVA="$JAVA_HOME/bin/java"
#export M2_HOME="./.maven"
#export M2="${M2_HOME}/bin"
#export PATH=$JAVA_HOME/bin:$M2:/bin/usr/bin

ABCL="java $JVM_OPTS -cp .abcl/abcl.jar:.abcl/abcl-contrib.jar org.armedbear.lisp.Main"

cat > $ABCL_BIN <<EOF
#!/bin/sh
#export PATH='~/.jdk/bin:~/.maven/bin:/bin:/usr/bin:/home/vcap/app/.maven/bin'
#export JAVA_HOME='~/.jdk'
echo "ABCL script, running with \$@ args and \$PATH"
# echo "MVN"
# file mvn
# echo "PWD"
# pwd
# echo "MVN by home"
# file ~/.maven/bin/mvn
# echo "MVN by relative"
# file .maven/bin/mvn
# echo "JAVA"
# type java
exec java \$JVM_OPTS -cp .abcl/abcl.jar:.abcl/abcl-contrib.jar org.armedbear.lisp.Main $@
EOF

echo "----"
cat $ABCL_BIN

#/bin/sh -x $ABCL_BIN --load $INIT2
#$BUILD_DIR/abcl --load $BUILD_DIR/.init2.lisp

echo "---- BUILD -----"
ls -larth $BUILD_DIR
echo "---- HOME -----"
ls -larth $HOME
echo "---- PWD ----"
ls -larth


cp -r $HOME/quicklisp $BUILD_DIR
cp -r $HOME/.m2 $BUILD_DIR


echo "-----> END OF COMPILE -----------------------"
